/**
 * generated by Xtext 2.14.0
 */
package fr.unice.polytech.polybot.botdsl.formatting2;

import com.google.inject.Inject;
import fr.unice.polytech.polybot.botdsl.services.BotDslGrammarAccess;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import polybot_modelling_language.Instruction;
import polybot_modelling_language.Robot;
import polybot_modelling_language.Scene;

@SuppressWarnings("all")
public class BotDslFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private BotDslGrammarAccess _botDslGrammarAccess;
  
  protected void _format(final Scene scene, @Extension final IFormattableDocument document) {
    document.<Robot>format(scene.getRobot());
  }
  
  protected void _format(final Robot robot, @Extension final IFormattableDocument document) {
    EList<Instruction> _instructions = robot.getInstructions();
    for (final Instruction instruction : _instructions) {
      document.<Instruction>format(instruction);
    }
  }
  
  public void format(final Object robot, final IFormattableDocument document) {
    if (robot instanceof XtextResource) {
      _format((XtextResource)robot, document);
      return;
    } else if (robot instanceof Robot) {
      _format((Robot)robot, document);
      return;
    } else if (robot instanceof Scene) {
      _format((Scene)robot, document);
      return;
    } else if (robot instanceof EObject) {
      _format((EObject)robot, document);
      return;
    } else if (robot == null) {
      _format((Void)null, document);
      return;
    } else if (robot != null) {
      _format(robot, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(robot, document).toString());
    }
  }
}
