/*
 * generated by Xtext 2.14.0
 */
package fr.unice.polytech.polybot.botdsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class BotDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class SceneElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.unice.polytech.polybot.botdsl.BotDsl.Scene");
		private final Assignment cRobotAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cRobotRobotParserRuleCall_0 = (RuleCall)cRobotAssignment.eContents().get(0);
		
		//Scene:
		//	robot=Robot;
		@Override public ParserRule getRule() { return rule; }
		
		//robot=Robot
		public Assignment getRobotAssignment() { return cRobotAssignment; }
		
		//Robot
		public RuleCall getRobotRobotParserRuleCall_0() { return cRobotRobotParserRuleCall_0; }
	}
	public class InstructionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.unice.polytech.polybot.botdsl.BotDsl.Instruction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cMoveStraightParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cTurnRightParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cTurnLeftParserRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final RuleCall cReleaseParserRuleCall_0_3 = (RuleCall)cAlternatives_0.eContents().get(3);
		private final RuleCall cCatchParserRuleCall_0_4 = (RuleCall)cAlternatives_0.eContents().get(4);
		private final RuleCall cComeHomeParserRuleCall_0_5 = (RuleCall)cAlternatives_0.eContents().get(5);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLabelKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cNextInstructionTrueAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cNextInstructionTrueEStringParserRuleCall_2_0_1_0 = (RuleCall)cNextInstructionTrueAssignment_2_0_1.eContents().get(0);
		private final Keyword cVerticalLineKeyword_2_0_2 = (Keyword)cGroup_2_0.eContents().get(2);
		private final Assignment cNextInstructionFalseAssignment_2_0_3 = (Assignment)cGroup_2_0.eContents().get(3);
		private final RuleCall cNextInstructionFalseEStringParserRuleCall_2_0_3_0 = (RuleCall)cNextInstructionFalseAssignment_2_0_3.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cNextInstructionAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cNextInstructionEStringParserRuleCall_2_1_1_0 = (RuleCall)cNextInstructionAssignment_2_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Instruction:
		//	(MoveStraight | TurnRight | TurnLeft | Release | Catch | ComeHome) ("label" name=EString)? (('->'
		//	nextInstructionTrue=EString '|' nextInstructionFalse=EString)? | ('->' nextInstruction=EString)?) ';';
		@Override public ParserRule getRule() { return rule; }
		
		//(MoveStraight | TurnRight | TurnLeft | Release | Catch | ComeHome) ("label" name=EString)? (('->'
		//nextInstructionTrue=EString '|' nextInstructionFalse=EString)? | ('->' nextInstruction=EString)?) ';'
		public Group getGroup() { return cGroup; }
		
		//MoveStraight | TurnRight | TurnLeft | Release | Catch | ComeHome
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//MoveStraight
		public RuleCall getMoveStraightParserRuleCall_0_0() { return cMoveStraightParserRuleCall_0_0; }
		
		//TurnRight
		public RuleCall getTurnRightParserRuleCall_0_1() { return cTurnRightParserRuleCall_0_1; }
		
		//TurnLeft
		public RuleCall getTurnLeftParserRuleCall_0_2() { return cTurnLeftParserRuleCall_0_2; }
		
		//Release
		public RuleCall getReleaseParserRuleCall_0_3() { return cReleaseParserRuleCall_0_3; }
		
		//Catch
		public RuleCall getCatchParserRuleCall_0_4() { return cCatchParserRuleCall_0_4; }
		
		//ComeHome
		public RuleCall getComeHomeParserRuleCall_0_5() { return cComeHomeParserRuleCall_0_5; }
		
		//("label" name=EString)?
		public Group getGroup_1() { return cGroup_1; }
		
		//"label"
		public Keyword getLabelKeyword_1_0() { return cLabelKeyword_1_0; }
		
		//name=EString
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_1_0() { return cNameEStringParserRuleCall_1_1_0; }
		
		//('->' nextInstructionTrue=EString '|' nextInstructionFalse=EString)? | ('->' nextInstruction=EString)?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//('->' nextInstructionTrue=EString '|' nextInstructionFalse=EString)?
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_2_0_0() { return cHyphenMinusGreaterThanSignKeyword_2_0_0; }
		
		//nextInstructionTrue=EString
		public Assignment getNextInstructionTrueAssignment_2_0_1() { return cNextInstructionTrueAssignment_2_0_1; }
		
		//EString
		public RuleCall getNextInstructionTrueEStringParserRuleCall_2_0_1_0() { return cNextInstructionTrueEStringParserRuleCall_2_0_1_0; }
		
		//'|'
		public Keyword getVerticalLineKeyword_2_0_2() { return cVerticalLineKeyword_2_0_2; }
		
		//nextInstructionFalse=EString
		public Assignment getNextInstructionFalseAssignment_2_0_3() { return cNextInstructionFalseAssignment_2_0_3; }
		
		//EString
		public RuleCall getNextInstructionFalseEStringParserRuleCall_2_0_3_0() { return cNextInstructionFalseEStringParserRuleCall_2_0_3_0; }
		
		//('->' nextInstruction=EString)?
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_2_1_0() { return cHyphenMinusGreaterThanSignKeyword_2_1_0; }
		
		//nextInstruction=EString
		public Assignment getNextInstructionAssignment_2_1_1() { return cNextInstructionAssignment_2_1_1; }
		
		//EString
		public RuleCall getNextInstructionEStringParserRuleCall_2_1_1_0() { return cNextInstructionEStringParserRuleCall_2_1_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class RobotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.unice.polytech.polybot.botdsl.BotDsl.Robot");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRobotAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRobotKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDebugAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cDebugDebugKeyword_2_0 = (Keyword)cDebugAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cInstructionsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cInstructionsInstructionParserRuleCall_3_0_0 = (RuleCall)cInstructionsAssignment_3_0.eContents().get(0);
		private final Assignment cInstructionsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cInstructionsInstructionParserRuleCall_3_1_0 = (RuleCall)cInstructionsAssignment_3_1.eContents().get(0);
		
		//Robot:
		//	{Robot}
		//	'Robot' debug?='debug'? (instructions+=Instruction instructions+=Instruction*)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Robot} 'Robot' debug?='debug'? (instructions+=Instruction instructions+=Instruction*)?
		public Group getGroup() { return cGroup; }
		
		//{Robot}
		public Action getRobotAction_0() { return cRobotAction_0; }
		
		//'Robot'
		public Keyword getRobotKeyword_1() { return cRobotKeyword_1; }
		
		//debug?='debug'?
		public Assignment getDebugAssignment_2() { return cDebugAssignment_2; }
		
		//'debug'
		public Keyword getDebugDebugKeyword_2_0() { return cDebugDebugKeyword_2_0; }
		
		//(instructions+=Instruction instructions+=Instruction*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//instructions+=Instruction
		public Assignment getInstructionsAssignment_3_0() { return cInstructionsAssignment_3_0; }
		
		//Instruction
		public RuleCall getInstructionsInstructionParserRuleCall_3_0_0() { return cInstructionsInstructionParserRuleCall_3_0_0; }
		
		//instructions+=Instruction*
		public Assignment getInstructionsAssignment_3_1() { return cInstructionsAssignment_3_1; }
		
		//Instruction
		public RuleCall getInstructionsInstructionParserRuleCall_3_1_0() { return cInstructionsInstructionParserRuleCall_3_1_0; }
	}
	public class MoveStraightElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.unice.polytech.polybot.botdsl.BotDsl.MoveStraight");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForwardKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDistanceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDistanceEIntParserRuleCall_1_0 = (RuleCall)cDistanceAssignment_1.eContents().get(0);
		
		//MoveStraight:
		//	'forward' distance=EInt;
		@Override public ParserRule getRule() { return rule; }
		
		//'forward' distance=EInt
		public Group getGroup() { return cGroup; }
		
		//'forward'
		public Keyword getForwardKeyword_0() { return cForwardKeyword_0; }
		
		//distance=EInt
		public Assignment getDistanceAssignment_1() { return cDistanceAssignment_1; }
		
		//EInt
		public RuleCall getDistanceEIntParserRuleCall_1_0() { return cDistanceEIntParserRuleCall_1_0; }
	}
	public class TurnRightElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.unice.polytech.polybot.botdsl.BotDsl.TurnRight");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTurnRightKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAngleAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAngleEIntParserRuleCall_1_0 = (RuleCall)cAngleAssignment_1.eContents().get(0);
		
		//TurnRight:
		//	'turnRight' angle=EInt;
		@Override public ParserRule getRule() { return rule; }
		
		//'turnRight' angle=EInt
		public Group getGroup() { return cGroup; }
		
		//'turnRight'
		public Keyword getTurnRightKeyword_0() { return cTurnRightKeyword_0; }
		
		//angle=EInt
		public Assignment getAngleAssignment_1() { return cAngleAssignment_1; }
		
		//EInt
		public RuleCall getAngleEIntParserRuleCall_1_0() { return cAngleEIntParserRuleCall_1_0; }
	}
	public class TurnLeftElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.unice.polytech.polybot.botdsl.BotDsl.TurnLeft");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTurnLeftKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAngleAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAngleEIntParserRuleCall_1_0 = (RuleCall)cAngleAssignment_1.eContents().get(0);
		
		//TurnLeft:
		//	'turnLeft' angle=EInt;
		@Override public ParserRule getRule() { return rule; }
		
		//'turnLeft' angle=EInt
		public Group getGroup() { return cGroup; }
		
		//'turnLeft'
		public Keyword getTurnLeftKeyword_0() { return cTurnLeftKeyword_0; }
		
		//angle=EInt
		public Assignment getAngleAssignment_1() { return cAngleAssignment_1; }
		
		//EInt
		public RuleCall getAngleEIntParserRuleCall_1_0() { return cAngleEIntParserRuleCall_1_0; }
	}
	public class CatchElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.unice.polytech.polybot.botdsl.BotDsl.Catch");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCatchAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCatchKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Catch:
		//	{Catch}
		//	'catch';
		@Override public ParserRule getRule() { return rule; }
		
		//{Catch} 'catch'
		public Group getGroup() { return cGroup; }
		
		//{Catch}
		public Action getCatchAction_0() { return cCatchAction_0; }
		
		//'catch'
		public Keyword getCatchKeyword_1() { return cCatchKeyword_1; }
	}
	public class ReleaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.unice.polytech.polybot.botdsl.BotDsl.Release");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cReleaseAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cReleaseKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Release:
		//	{Release}
		//	'release';
		@Override public ParserRule getRule() { return rule; }
		
		//{Release} 'release'
		public Group getGroup() { return cGroup; }
		
		//{Release}
		public Action getReleaseAction_0() { return cReleaseAction_0; }
		
		//'release'
		public Keyword getReleaseKeyword_1() { return cReleaseKeyword_1; }
	}
	public class ComeHomeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.unice.polytech.polybot.botdsl.BotDsl.ComeHome");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cComeHomeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cComeHomeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ComeHome:
		//	{ComeHome}
		//	'comeHome';
		@Override public ParserRule getRule() { return rule; }
		
		//{ComeHome} 'comeHome'
		public Group getGroup() { return cGroup; }
		
		//{ComeHome}
		public Action getComeHomeAction_0() { return cComeHomeAction_0; }
		
		//'comeHome'
		public Keyword getComeHomeKeyword_1() { return cComeHomeKeyword_1; }
	}
	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.unice.polytech.polybot.botdsl.BotDsl.EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt ecore::EInt:
		//	'-'? INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.unice.polytech.polybot.botdsl.BotDsl.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString:
		//	STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	
	
	private final SceneElements pScene;
	private final InstructionElements pInstruction;
	private final RobotElements pRobot;
	private final MoveStraightElements pMoveStraight;
	private final TurnRightElements pTurnRight;
	private final TurnLeftElements pTurnLeft;
	private final CatchElements pCatch;
	private final ReleaseElements pRelease;
	private final ComeHomeElements pComeHome;
	private final EIntElements pEInt;
	private final EStringElements pEString;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public BotDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pScene = new SceneElements();
		this.pInstruction = new InstructionElements();
		this.pRobot = new RobotElements();
		this.pMoveStraight = new MoveStraightElements();
		this.pTurnRight = new TurnRightElements();
		this.pTurnLeft = new TurnLeftElements();
		this.pCatch = new CatchElements();
		this.pRelease = new ReleaseElements();
		this.pComeHome = new ComeHomeElements();
		this.pEInt = new EIntElements();
		this.pEString = new EStringElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("fr.unice.polytech.polybot.botdsl.BotDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Scene:
	//	robot=Robot;
	public SceneElements getSceneAccess() {
		return pScene;
	}
	
	public ParserRule getSceneRule() {
		return getSceneAccess().getRule();
	}
	
	//Instruction:
	//	(MoveStraight | TurnRight | TurnLeft | Release | Catch | ComeHome) ("label" name=EString)? (('->'
	//	nextInstructionTrue=EString '|' nextInstructionFalse=EString)? | ('->' nextInstruction=EString)?) ';';
	public InstructionElements getInstructionAccess() {
		return pInstruction;
	}
	
	public ParserRule getInstructionRule() {
		return getInstructionAccess().getRule();
	}
	
	//Robot:
	//	{Robot}
	//	'Robot' debug?='debug'? (instructions+=Instruction instructions+=Instruction*)?;
	public RobotElements getRobotAccess() {
		return pRobot;
	}
	
	public ParserRule getRobotRule() {
		return getRobotAccess().getRule();
	}
	
	//MoveStraight:
	//	'forward' distance=EInt;
	public MoveStraightElements getMoveStraightAccess() {
		return pMoveStraight;
	}
	
	public ParserRule getMoveStraightRule() {
		return getMoveStraightAccess().getRule();
	}
	
	//TurnRight:
	//	'turnRight' angle=EInt;
	public TurnRightElements getTurnRightAccess() {
		return pTurnRight;
	}
	
	public ParserRule getTurnRightRule() {
		return getTurnRightAccess().getRule();
	}
	
	//TurnLeft:
	//	'turnLeft' angle=EInt;
	public TurnLeftElements getTurnLeftAccess() {
		return pTurnLeft;
	}
	
	public ParserRule getTurnLeftRule() {
		return getTurnLeftAccess().getRule();
	}
	
	//Catch:
	//	{Catch}
	//	'catch';
	public CatchElements getCatchAccess() {
		return pCatch;
	}
	
	public ParserRule getCatchRule() {
		return getCatchAccess().getRule();
	}
	
	//Release:
	//	{Release}
	//	'release';
	public ReleaseElements getReleaseAccess() {
		return pRelease;
	}
	
	public ParserRule getReleaseRule() {
		return getReleaseAccess().getRule();
	}
	
	//ComeHome:
	//	{ComeHome}
	//	'comeHome';
	public ComeHomeElements getComeHomeAccess() {
		return pComeHome;
	}
	
	public ParserRule getComeHomeRule() {
		return getComeHomeAccess().getRule();
	}
	
	//EInt ecore::EInt:
	//	'-'? INT;
	public EIntElements getEIntAccess() {
		return pEInt;
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}
	
	//EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
