/*
 * generated by Xtext 2.14.0
 */
package fr.unice.polytech.polybot.botdsl.serializer;

import com.google.inject.Inject;
import fr.unice.polytech.polybot.botdsl.services.BotDslGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import polybot_modelling_language.Catch;
import polybot_modelling_language.ComeHome;
import polybot_modelling_language.MoveStraight;
import polybot_modelling_language.Polybot_modelling_languagePackage;
import polybot_modelling_language.Release;
import polybot_modelling_language.Robot;
import polybot_modelling_language.Scene;
import polybot_modelling_language.TurnLeft;
import polybot_modelling_language.TurnRight;

@SuppressWarnings("all")
public class BotDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private BotDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == Polybot_modelling_languagePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case Polybot_modelling_languagePackage.CATCH:
				if (rule == grammarAccess.getCatchRule()) {
					sequence_Catch(context, (Catch) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getInstructionRule()) {
					sequence_Catch_Instruction(context, (Catch) semanticObject); 
					return; 
				}
				else break;
			case Polybot_modelling_languagePackage.COME_HOME:
				if (rule == grammarAccess.getComeHomeRule()) {
					sequence_ComeHome(context, (ComeHome) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getInstructionRule()) {
					sequence_ComeHome_Instruction(context, (ComeHome) semanticObject); 
					return; 
				}
				else break;
			case Polybot_modelling_languagePackage.MOVE_STRAIGHT:
				if (rule == grammarAccess.getInstructionRule()) {
					sequence_Instruction_MoveStraight(context, (MoveStraight) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getMoveStraightRule()) {
					sequence_MoveStraight(context, (MoveStraight) semanticObject); 
					return; 
				}
				else break;
			case Polybot_modelling_languagePackage.RELEASE:
				if (rule == grammarAccess.getInstructionRule()) {
					sequence_Instruction_Release(context, (Release) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getReleaseRule()) {
					sequence_Release(context, (Release) semanticObject); 
					return; 
				}
				else break;
			case Polybot_modelling_languagePackage.ROBOT:
				sequence_Robot(context, (Robot) semanticObject); 
				return; 
			case Polybot_modelling_languagePackage.SCENE:
				sequence_Scene(context, (Scene) semanticObject); 
				return; 
			case Polybot_modelling_languagePackage.TURN_LEFT:
				if (rule == grammarAccess.getInstructionRule()) {
					sequence_Instruction_TurnLeft(context, (TurnLeft) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getTurnLeftRule()) {
					sequence_TurnLeft(context, (TurnLeft) semanticObject); 
					return; 
				}
				else break;
			case Polybot_modelling_languagePackage.TURN_RIGHT:
				if (rule == grammarAccess.getInstructionRule()) {
					sequence_Instruction_TurnRight(context, (TurnRight) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getTurnRightRule()) {
					sequence_TurnRight(context, (TurnRight) semanticObject); 
					return; 
				}
				else break;
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Catch returns Catch
	 *
	 * Constraint:
	 *     {Catch}
	 */
	protected void sequence_Catch(ISerializationContext context, Catch semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Instruction returns Catch
	 *
	 * Constraint:
	 *     (name=EString? ((nextInstructionTrue=EString nextInstructionFalse=EString) | nextInstruction=EString)?)
	 */
	protected void sequence_Catch_Instruction(ISerializationContext context, Catch semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ComeHome returns ComeHome
	 *
	 * Constraint:
	 *     {ComeHome}
	 */
	protected void sequence_ComeHome(ISerializationContext context, ComeHome semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Instruction returns ComeHome
	 *
	 * Constraint:
	 *     (name=EString? ((nextInstructionTrue=EString nextInstructionFalse=EString) | nextInstruction=EString)?)
	 */
	protected void sequence_ComeHome_Instruction(ISerializationContext context, ComeHome semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Instruction returns MoveStraight
	 *
	 * Constraint:
	 *     (distance=EInt name=EString? ((nextInstructionTrue=EString nextInstructionFalse=EString) | nextInstruction=EString)?)
	 */
	protected void sequence_Instruction_MoveStraight(ISerializationContext context, MoveStraight semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Instruction returns Release
	 *
	 * Constraint:
	 *     (name=EString? ((nextInstructionTrue=EString nextInstructionFalse=EString) | nextInstruction=EString)?)
	 */
	protected void sequence_Instruction_Release(ISerializationContext context, Release semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Instruction returns TurnLeft
	 *
	 * Constraint:
	 *     (angle=EInt name=EString? ((nextInstructionTrue=EString nextInstructionFalse=EString) | nextInstruction=EString)?)
	 */
	protected void sequence_Instruction_TurnLeft(ISerializationContext context, TurnLeft semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Instruction returns TurnRight
	 *
	 * Constraint:
	 *     (angle=EInt name=EString? ((nextInstructionTrue=EString nextInstructionFalse=EString) | nextInstruction=EString)?)
	 */
	protected void sequence_Instruction_TurnRight(ISerializationContext context, TurnRight semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MoveStraight returns MoveStraight
	 *
	 * Constraint:
	 *     distance=EInt
	 */
	protected void sequence_MoveStraight(ISerializationContext context, MoveStraight semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Polybot_modelling_languagePackage.Literals.MOVE_STRAIGHT__DISTANCE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Polybot_modelling_languagePackage.Literals.MOVE_STRAIGHT__DISTANCE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMoveStraightAccess().getDistanceEIntParserRuleCall_1_0(), semanticObject.getDistance());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Release returns Release
	 *
	 * Constraint:
	 *     {Release}
	 */
	protected void sequence_Release(ISerializationContext context, Release semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Robot returns Robot
	 *
	 * Constraint:
	 *     (debug?='debug'? (instructions+=Instruction instructions+=Instruction*)?)
	 */
	protected void sequence_Robot(ISerializationContext context, Robot semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Scene returns Scene
	 *
	 * Constraint:
	 *     robot=Robot
	 */
	protected void sequence_Scene(ISerializationContext context, Scene semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Polybot_modelling_languagePackage.Literals.SCENE__ROBOT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Polybot_modelling_languagePackage.Literals.SCENE__ROBOT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSceneAccess().getRobotRobotParserRuleCall_0(), semanticObject.getRobot());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     TurnLeft returns TurnLeft
	 *
	 * Constraint:
	 *     angle=EInt
	 */
	protected void sequence_TurnLeft(ISerializationContext context, TurnLeft semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Polybot_modelling_languagePackage.Literals.TURN__ANGLE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Polybot_modelling_languagePackage.Literals.TURN__ANGLE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTurnLeftAccess().getAngleEIntParserRuleCall_1_0(), semanticObject.getAngle());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     TurnRight returns TurnRight
	 *
	 * Constraint:
	 *     angle=EInt
	 */
	protected void sequence_TurnRight(ISerializationContext context, TurnRight semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Polybot_modelling_languagePackage.Literals.TURN__ANGLE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Polybot_modelling_languagePackage.Literals.TURN__ANGLE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTurnRightAccess().getAngleEIntParserRuleCall_1_0(), semanticObject.getAngle());
		feeder.finish();
	}
	
	
}
