/*
 * generated by Xtext 2.14.0
 */
package fr.unice.polytech.polybot.botdsl.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import fr.unice.polytech.polybot.botdsl.ide.contentassist.antlr.internal.InternalBotDslParser;
import fr.unice.polytech.polybot.botdsl.services.BotDslGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class BotDslParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(BotDslGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, BotDslGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getInstructionAccess().getAlternatives_0(), "rule__Instruction__Alternatives_0");
			builder.put(grammarAccess.getInstructionAccess().getAlternatives_2(), "rule__Instruction__Alternatives_2");
			builder.put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
			builder.put(grammarAccess.getInstructionAccess().getGroup(), "rule__Instruction__Group__0");
			builder.put(grammarAccess.getInstructionAccess().getGroup_1(), "rule__Instruction__Group_1__0");
			builder.put(grammarAccess.getInstructionAccess().getGroup_2_0(), "rule__Instruction__Group_2_0__0");
			builder.put(grammarAccess.getInstructionAccess().getGroup_2_1(), "rule__Instruction__Group_2_1__0");
			builder.put(grammarAccess.getRobotAccess().getGroup(), "rule__Robot__Group__0");
			builder.put(grammarAccess.getRobotAccess().getGroup_3(), "rule__Robot__Group_3__0");
			builder.put(grammarAccess.getMoveStraightAccess().getGroup(), "rule__MoveStraight__Group__0");
			builder.put(grammarAccess.getTurnRightAccess().getGroup(), "rule__TurnRight__Group__0");
			builder.put(grammarAccess.getTurnLeftAccess().getGroup(), "rule__TurnLeft__Group__0");
			builder.put(grammarAccess.getCatchAccess().getGroup(), "rule__Catch__Group__0");
			builder.put(grammarAccess.getReleaseAccess().getGroup(), "rule__Release__Group__0");
			builder.put(grammarAccess.getComeHomeAccess().getGroup(), "rule__ComeHome__Group__0");
			builder.put(grammarAccess.getEIntAccess().getGroup(), "rule__EInt__Group__0");
			builder.put(grammarAccess.getSceneAccess().getRobotAssignment(), "rule__Scene__RobotAssignment");
			builder.put(grammarAccess.getInstructionAccess().getNameAssignment_1_1(), "rule__Instruction__NameAssignment_1_1");
			builder.put(grammarAccess.getInstructionAccess().getNextInstructionTrueAssignment_2_0_1(), "rule__Instruction__NextInstructionTrueAssignment_2_0_1");
			builder.put(grammarAccess.getInstructionAccess().getNextInstructionFalseAssignment_2_0_3(), "rule__Instruction__NextInstructionFalseAssignment_2_0_3");
			builder.put(grammarAccess.getInstructionAccess().getNextInstructionAssignment_2_1_1(), "rule__Instruction__NextInstructionAssignment_2_1_1");
			builder.put(grammarAccess.getRobotAccess().getDebugAssignment_2(), "rule__Robot__DebugAssignment_2");
			builder.put(grammarAccess.getRobotAccess().getInstructionsAssignment_3_0(), "rule__Robot__InstructionsAssignment_3_0");
			builder.put(grammarAccess.getRobotAccess().getInstructionsAssignment_3_1(), "rule__Robot__InstructionsAssignment_3_1");
			builder.put(grammarAccess.getMoveStraightAccess().getDistanceAssignment_1(), "rule__MoveStraight__DistanceAssignment_1");
			builder.put(grammarAccess.getTurnRightAccess().getAngleAssignment_1(), "rule__TurnRight__AngleAssignment_1");
			builder.put(grammarAccess.getTurnLeftAccess().getAngleAssignment_1(), "rule__TurnLeft__AngleAssignment_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private BotDslGrammarAccess grammarAccess;

	@Override
	protected InternalBotDslParser createParser() {
		InternalBotDslParser result = new InternalBotDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public BotDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(BotDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
